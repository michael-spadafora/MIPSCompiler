#include "hw1.h"
#include <stdbool.h>

#ifdef _STRING_H
#error "Do not #include <string.h>. You will get a ZERO."
#endif

#ifdef _STRINGS_H
#error "Do not #include <strings.h>. You will get a ZERO."
#endif

#ifdef _CTYPE_H
#error "Do not #include <ctype.h>. You will get a ZERO."
#endif

/*
 * You may modify this file and/or move the functions contained here
 * to other source files (except for main.c) as you wish.
 */

/**
 * @brief Validates command line arguments passed to the program.
 * @details This function will validate all the arguments passed to the
 * program, returning 1 if validation succeeds and 0 if validation fails.
 * Upon successful return, the selected program options will be set in the
 * global variable "global_options", where they will be accessible
 * elsewhere in the program.
 *
 * @param argc The number of arguments passed to the program from the CLI.
 * @param argv The argument strings passed to the program from the CLI.
 * @return 1 if validation succeeds and 0 if validation fails.
 * Refer to the homework document for the effects of this function on
 * global variables.
 * @modifies global variable "global_options" to contain a bitmap representing
 * the selected options.
 */

int hatoi(char * string);


int validargs(int argc, char **argv) //this is an array of char arrays aka an array of strings
{
	if (argc<=1 || argc>7){
		return 0;
	}
	int hasHadFlag = 0;
	int hFlag = 0;
	int aFlag = 0;
	int dFlag = 0;
	int bFlag = 0;
	char* address;
	int addressNum;
	int eFlag = 0;
	int bigEnd = 0;
	int littleEnd = 0;
	int howMany= 0;
    for (int i = 1; i < argc; i++){

        if (argv[i][0] == '-'){ //check if something is a flag or not.
			//-\0
        	char next = argv[i][1]; // this will give a seg fault if the argument is a dash with nothing else
        	if (next == 0){
        		return 0;
        	}
        	if (argv[i][2]!=0){
        		return 0;
        	}
			if( next == 0){
				return 0;
			}
        	if (next == 'h'){ //check if current flag is h flag
        		if (i!=1){
        			return 0;
        		}
        		hFlag = 1;
        		break; //ignore all the other stuff if h is used
        	}

        	else if (next == 'a'){ //check if the current flag is an a flag
        		if (aFlag || bFlag || dFlag || eFlag){
        			return 0;
        		}
        		aFlag = 1;
        	}

        	else if (next == 'd') {
        		if (aFlag || bFlag || dFlag || eFlag){
        			return 0;
        		}
        		dFlag = 1;
        	}
//check base address flag
        	else if (next == 'b'){
        		if (bFlag || eFlag){
        			return 0;
        		}

        		bFlag = 1;

        		i++;

        		if (i>=argc){ //if we went too far, there is something wrong.
        			return 0;
        		}

        		address = argv[i];

        		int j = 0;
        		//here we check if the address is valid
        		char currChar = address[j];
        		while (currChar != 0){ //checks if all the numbers in the address are hex values


        			if (!(currChar>='a' && currChar<='f') && !(currChar>='A' && currChar <='F') && !(currChar>='0' && currChar<='9')){
        				return 0;
        			}
        			j++;
        			currChar = address[j];
        			if (j > 8){
        				return 0; //for some reason, this keeps breaking
        			}

        		}
        		addressNum = hatoi(address);

        		if (addressNum % 4096 != 0){
        			return 0;
        		}

        	}

        	else if (next == 'e'){ //check if other flags have been had
        		if(eFlag){
        			return 0;
        		}
        		eFlag = 1;

        		i++;
        		char* endian = argv[i];

        		bigEnd = (endian[0] == 'b');
        		littleEnd = (endian[0] == 'l');
        		if (endian[1] != '\0'){ //check if it is too long
        			return 0;
        		}

        		if (!bigEnd && !littleEnd){
        			return 0;
        		}
        	}
        	else return 0;


       	} else {
       		return 0;
       	}



    }

    int flagSum = 0;

	if (dFlag){
		flagSum = 2;
	}

	if (bigEnd){
		flagSum += 4;
	}

	if (bFlag){
		flagSum+= addressNum;


	}

	if (hFlag!=0){
		flagSum=1;
	}

	global_options = flagSum;


    return 1;
}
/*
int strlen(char * string){
	int len = 0;
	char currChar = ' ';
	while (currChar != 0){
		len++;
	}
	return len;
}
*/
int hatoi(char * string){
	char currChar  = string[0];
	int length = 0;
	while (currChar!='\0'){
		length++; //count the length of the current string
		currChar = string[length];
	}

	int multiplier = 1;
	int cumsum = 0;

	for (int i = length-1; i >=0; i--){
		currChar = string[i];
		int value;
		if ('0' <= currChar && currChar <= '9') value = currChar - '0';
		else if ('a'<= currChar && currChar <= 'f') value = 10 + currChar - 'a';
		else if ('A'<= currChar && currChar <= 'F') value = 10 + currChar - 'A';

		int currentValue = multiplier * value;
		cumsum += currentValue;

		multiplier = multiplier*16;
	}
	return cumsum;
}

/**
 * @brief Computes the binary code for a MIPS machine instruction.
 * @details This function takes a pointer to an Instruction structure
 * that contains information defining a MIPS machine instruction and
 * computes the binary code for that instruction.  The code is returne
 * in the "value" field of the Instruction structure.
 *
 * @param ip The Instruction structure containing information about the
 * instruction, except for the "value" field.
 * @param addr Address at which the instruction is to appear in memory.
 * The address is used to compute the PC-relative offsets used in branch
 * instructions.
 * @return 1 if the instruction was successfully encoded, 0 otherwise.
 * @modifies the "value" field of the Instruction structure to contain the
 * binary code for the instruction.
 */
int encode(Instruction *ip, unsigned int addr) {
	Instruction instruction = * ip;
	Instr_info info = * (instruction.info);
	Opcode opcode = info.opcode;
	Opcode current = opcodeTable[0];

	int value = 0x00000000;

	int loc = -1;
	for (int i = 0; i <64; i++){
		if (opcode == opcodeTable[i]){
			loc = i;
			break;
		}
	}
	if (loc == -1){
		return 0;
	}

	value+= (loc << 26); //opcode section of value is now set
	// now we need rs, rt, rd
	int regs[3] = {0,0,0};


	for (int i = 0; i < 3; i++){
		char reg = instruction.regs[i];
		int regNum = reg - '0';
		regs[i] = regNum;
	}
0
	value += regs[0] << 21; //rs
	value += regs[1] << 16; //rt
	value += regs[2] << 11; //rd

	int extra = instruction.extra;




//7872108521
//3157049292
//hmu ;)




















    return 1;
}

/**
 * @brief Decodes the binary code for a MIPS machine instruction.
 * @details This function takes a pointer to an Instruction structure
 * whose "value" field has been initialized to the binary code for
 * MIPS machine instruction and it decodes the instruction to obtain
 * details about the type of instruction and its arguments.
 * The decoded information is returned by setting the other fields
 * of the Instruction structure.
 *
 * @param ip The Instruction structure containing the binary code for
 * a MIPS instruction in its "value" field.
 * @param addr Address at which the instruction appears in memory.
 * The address is used to compute absolute branch addresses from the
 * the PC-relative offsets that occur in the instruction.
 * @return 1 if the instruction was successfully decoded, 0 otherwise.
 * @modifies the fields other than the "value" field to contain the
 * decoded information about the instruction.
 */
int decode(Instruction *ip, unsigned int addr) {

	Instruction instruction = *ip;
	int val = instruction.value;
	int codeVal = val >> 26;


	Opcode opcode = opcodeTable[codeVal]; //gets the original opcode

	if (opcode == SPECIAL){ //processes the opcode for SPECIAL
		int specVal = val & 0x0000001f;
		codeVal = specVal;
		opcode = opcodeTable[codeVal];
	}

	else if (opcode == BCOND){ //processes opcode for BCOND
		int bcond = (val & 0x001f0000) >> 16;
		opcode = ILLEGL;
		if (bcond == 0b00000){
			opcode = OP_BLTZ;
		}
		else if (bcond == 0b00001){
			opcode = OP_BGEZ;
		} else if (bcond == 0b10001){
			opcode = OP_BLTZAL;
		} else if (bcond == 0b10000){
			opcode = OP_BGEZAL;
		}
	}

	//opcode = opcodeTable[codeVal]; //this is the "name" of the instruction

	if (opcode == ILLEGL){
		return 0;
	}



	//////////////////////////////////////////
	Instr_info info = instrTable[codeVal]; // gets the info. youre going to find the
	Type typez = info.type;
	//Type types = NTYP;

	//typedef enum type { NTYP, ITYP, JTYP, RTYP } Type;






	// info field is set
	Instr_info * infop = &info;
	instruction.info = infop;

	int rs = (val & 0x03E00000 )>>21; // we need to move it over and convert it to a char
	int rt = (val & 0x001f0000) >> 16;
	int rd = (val & 0x0000f800) >> 11;

	char rschar = rs + '0';
	char rtchar = rt + '0';
	char rdchar = rd + '0';


	instruction.regs[0] = rschar;
	instruction.regs[1] = rtchar;
	instruction.regs[2] = rdchar; //register fields are set



	for (int i = 0; i < 3; i++){ //args field is set
		Source s = info.srcs[i];
		if (s == RS){
			instruction.args[i] = rs;
		} else if (s == RT){
			instruction.args[i] = rt;
		} else if (s == RD){
			instruction.args[i] = rd;
		} else if (s == NSRC) {
			continue;
		} else if (s == EXTRA) { //extra field is set
			if (opcode == OP_BREAK){
				instruction.args[i] = val & 0x03ffffc0;
				instruction.extra = instruction.args[i];
			} else if (typez == RTYP) {
				instruction.args[i] = val & 0x00000dc0;
				instruction.extra = instruction.args[i];
			} else if (typez == ITYP) {
				if ((val & 0x00008000) != 0){
					instruction.args[i] = (val & 0x0000ffff) | 0xffff0000;
				} else {
					instruction.args[i] = val & 0x0000ffff;
				}


				if (opcode == OP_BEQ || opcode== OP_BGEZ ||  opcode == OP_BGEZ ||  opcode  == OP_BGEZAL || opcode  ==OP_BGTZ ||
					opcode ==  OP_BLEZ || opcode ==  OP_BLTZ || opcode ==  OP_BLTZAL || opcode == OP_BNE)  {
					instruction.args[i] = instruction.args[i] + addr + 4;
					instruction.extra = instruction.args[i];
				}
			} else if (typez == JTYP){
				instruction.args[i] = ((val & 0x03ffffff) << 2 ) + 4 + addr;
				instruction.extra = instruction.args[i];
			}

		}
	}
    return 1;
}
